================================================================================
EXPR or EXPR
================================================================================
1 or 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (lowprec_logical_expression
      (number)
      (number))))

================================================================================
EXPR and EXPR
================================================================================
1 and 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (lowprec_logical_expression
      (number)
      (number))))

================================================================================
EXPR, EXPR
================================================================================
1, 2, 3;
1, 2,;
1,,3;
1 => 4;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (list_expression
      (number)
      (number)
      (number)))
  (expression_statement
    (list_expression
      (number)
      (number)))
  (expression_statement
    (list_expression
      (number)
      (number)))
  (expression_statement
    (list_expression
      (number)
      (number))))

================================================================================
EXPR || EXPR
================================================================================
12 || 34;
12 // 34;
12 && 34;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (number)
      (number)))
  (expression_statement
    (binary_expression
      (number)
      (number)))
  (expression_statement
    (binary_expression
      (number)
      (number))))

================================================================================
EXPR eq EXPR
================================================================================
12 eq 34;
12 cmp 34;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (equality_expression
      (number)
      (number)))
  (expression_statement
    (equality_expression
      (number)
      (number))))

================================================================================
EXPR eq EXPR - list/non assoc
================================================================================
12 eq 34 eq 9002;
12 eq 34 eq 9002 eq 9004;
12 cmp 34 cmp 56;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (equality_expression
      (equality_expression
        (number)
        (number))
      (number)))
  (expression_statement
    (equality_expression
      (equality_expression
        (equality_expression
          (number)
          (number))
        (number))
      (number)))
  (expression_statement
    (equality_expression
      (number)
      (number)))
  (ERROR
    (number)))

================================================================================
EXPR < EXPR
================================================================================
12 < 34;
12 > 34;
12 <= 34;
12 >= 34;
12 isa 34;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (relational_expression
      (number)
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (number))))

================================================================================
EXPR < EXPR - list/non assoc
================================================================================
12 < 34 > 99 >= 3000;
12 isa 34 isa 56;
(12 < 34) > 45;
12 > (34 < 45);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (relational_expression
      (relational_expression
        (relational_expression
          (number)
          (number))
        (number))
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (number)))
  (ERROR
    (number))
  (expression_statement
    (relational_expression
      (relational_expression
        (number)
        (number))
      (number)))
  (expression_statement
    (relational_expression
      (number)
      (relational_expression
        (number)
        (number)))))

================================================================================
< and eq - list/non assoc corner cases
================================================================================
'' eq 2 > 3 > 4;
1 > 2 <=> 3;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (equality_expression
      (string_literal)
      (relational_expression
        (relational_expression
          (number)
          (number))
        (number))))
  (expression_statement
    (equality_expression
      (relational_expression
        (number)
        (number))
      (number))))

================================================================================
EXPR << EXPR
================================================================================
1 << 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (number)
      right: (number))))

================================================================================
EXPR + EXPR
================================================================================
1 + 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (number)
      right: (number))))

================================================================================
EXPR * EXPR
================================================================================
1 * 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (number)
      right: (number))))

================================================================================
EXPR =~ EXPR
================================================================================
$str =~ $re;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (scalar
        (varname))
      right: (scalar
        (varname)))))

================================================================================
EXPR ** EXPR
================================================================================
1 ** 2;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (number)
      right: (number))))

================================================================================
(EXPR)
================================================================================
1 * (2 + 3);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      left: (number)
      right: (binary_expression
        left: (number)
        right: (number)))))

================================================================================
!EXPR
================================================================================
!123;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (unary_expression
      operand: (number))))

================================================================================
EXPR ? EXPR : EXPR
================================================================================
12 ? 34 : 56;
1 ? 2 : 3 ? 4 : 5;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (conditional_expression
      condition: (number)
      consequent: (number)
      alternative: (number)))
  (expression_statement
    (conditional_expression
      condition: (number)
      consequent: (number)
      alternative: (conditional_expression
        condition: (number)
        consequent: (number)
        alternative: (number)))))

================================================================================
++EXPR
================================================================================
++$var;
--$var;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (preinc_expression
      (scalar
        (varname))))
  (expression_statement
    (preinc_expression
      (scalar
        (varname)))))

================================================================================
EXPR++
================================================================================
$var++;
$var--;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (postinc_expression
      (scalar
        (varname))))
  (expression_statement
    (postinc_expression
      (scalar
        (varname)))))

================================================================================
\EXPR
================================================================================
\123;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (refgen_expression
      (number))))

================================================================================
range ops
================================================================================
10 .. 20;
13 ... 14;
13 .. (1 .. 4);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (number)
      (number)))
  (expression_statement
    (binary_expression
      (number)
      (number)))
  (expression_statement
    (binary_expression
      (number)
      (binary_expression
        (number)
        (number)))))

================================================================================
range ops - nonassoc
================================================================================
1 .. 2 .. 3;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (number)
      (number)))
  (ERROR
    (number)))

================================================================================
diamond operators
================================================================================
<>;
<ARGV>;
<<>>;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (readline_expression))
  (expression_statement
    (readline_expression
      (filehandle)))
  (expression_statement
    (readline_expression)))

================================================================================
transliteration
================================================================================
tr/$things/@shtuff/cd;
tr[$things][@shtuff]sr;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (replacement)
      (transliteration_modifiers)))
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (replacement)
      (transliteration_modifiers))))

================================================================================
transliteration - 3 part quotelike insanity
================================================================================
tr[$things] (@shtuff)cd;
tr[$things] '@shtuff'cd;
tr[$things] =>@shtuff=cd;
tr[$things] #@shtuff#cd <-- tricks! it's a comment
  '@shtuff';
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (replacement)
      (transliteration_modifiers)))
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (replacement)
      (transliteration_modifiers)))
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (replacement)
      (transliteration_modifiers)))
  (expression_statement
    (transliteration_expression
      (transliteration_content)
      (comment)
      (replacement))))
