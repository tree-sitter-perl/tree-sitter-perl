================================================================================
Function call (0 args)
================================================================================
foo();
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function_call_expression
      (function))))

================================================================================
Function call (1 arg)
================================================================================
foo(123);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function_call_expression
      (function)
      (number))))

================================================================================
Function call (2 args)
================================================================================
foo(12, 34);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function_call_expression
      (function)
      (list_expression
        (number)
        (number)))))

================================================================================
Method call (no parens)
================================================================================
$obj->meth;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call_expression
      invocant: (scalar
        (varname))
      method: (method))))

================================================================================
Method call (0 args)
================================================================================
$obj->meth();
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call_expression
      invocant: (scalar
        (varname))
      method: (method))))

================================================================================
Method call (1 arg)
================================================================================
$obj->meth(123);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call_expression
      invocant: (scalar
        (varname))
      method: (method)
      arguments: (number))))

================================================================================
Method call (2 args)
================================================================================
$obj->meth(12, 34);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call_expression
      invocant: (scalar
        (varname))
      method: (method)
      arguments: (list_expression
        (number)
        (number)))))

================================================================================
Method call on class
================================================================================
Some::Module->new(1234);
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call_expression
      invocant: (bareword)
      method: (method)
      arguments: (number))))

================================================================================
Func0 Ops
================================================================================
__FILE__;
wait;
time();
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (func0op_call_expression))
  (expression_statement
    (func0op_call_expression))
  (expression_statement
    (func0op_call_expression)))

================================================================================
Func1 Ops
================================================================================
defined $x;
int($num);
int;
int();
int $x, int $y;
shift @arr;
keys %hash;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (func1op_call_expression
      (scalar
        (varname))))
  (expression_statement
    (func1op_call_expression
      (scalar
        (varname))))
  (expression_statement
    (func1op_call_expression))
  (expression_statement
    (func1op_call_expression))
  (expression_statement
    (list_expression
      (func1op_call_expression
        (scalar
          (varname)))
      (func1op_call_expression
        (scalar
          (varname)))))
  (expression_statement
    (func1op_call_expression
      (array
        (varname))))
  (expression_statement
    (func1op_call_expression
      (hash
        (varname)))))

================================================================================
Filetest operators
================================================================================
-r "path";
-w $path;
-s $file;
-x _;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (func1op_call_expression
      (interpolated_string_literal)))
  (expression_statement
    (func1op_call_expression
      (scalar
        (varname))))
  (expression_statement
    (func1op_call_expression
      (scalar
        (varname))))
  (expression_statement
    (func1op_call_expression
      (bareword))))

================================================================================
ambiguous funcs
================================================================================
croak 'thing', 'stuff';
print 'things', sum 1, 2, 3;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (string_literal)
      (string_literal)))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (string_literal)
      (ambiguous_function_call_expression
        (function)
        (number)
        (number)
        (number)))))

================================================================================
ambiguous funcs with indirect objects
================================================================================
print $sner 'herro';
print { $sner{boppers} } 'herro';
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (indirect_object
        (scalar
          (varname)))
      (string_literal)))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (indirect_object
        (block
          (expression_statement
            (hash_element_expression
              (container_variable
                (varname))
              (autoquoted_bareword)))))
      (string_literal))))

================================================================================
ambiguous funcs - indirect object fakeouts
================================================================================
print print 'herro';
print $sner{bop};
print $sner, $bler;
print $sner and die;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (ambiguous_function_call_expression
        (function)
        (string_literal))))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (hash_element_expression
        (container_variable
          (varname))
        (autoquoted_bareword))))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (scalar
        (varname))
      (scalar
        (varname))))
  (expression_statement
    (lowprec_logical_expression
      (ambiguous_function_call_expression
        (function)
        (scalar
          (varname)))
      (bareword))))

================================================================================
ambiguous funcs - tricky block vs hashref
================================================================================
takes_a_hash { 1, 2, 3, 4 };
its_a_block { 1, 2, 3, 4; 9 };
for_sure_a_hash { hi => 'there' }, 9001;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (anonymous_hash_expression
        (list_expression
          (number)
          (number)
          (number)
          (number)))))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (indirect_object
        (expression_statement
          (list_expression
            (number)
            (number)
            (number)
            (number)))
        (expression_statement
          (number)))))
  (expression_statement
    (ambiguous_function_call_expression
      (function)
      (anonymous_hash_expression
        (list_expression
          (autoquoted_bareword)
          (string_literal)))
      (number))))

================================================================================
non-ambiguous indirob handling (for builtins)
================================================================================
print($sner 'herro');
print({ $sner{boppers} } 'herro');
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function_call_expression
      (function)
      (indirect_object
        (scalar
          (varname)))
      (string_literal)))
  (expression_statement
    (function_call_expression
      (function)
      (indirect_object
        (block
          (expression_statement
            (hash_element_expression
              (container_variable
                (varname))
              (autoquoted_bareword)))))
      (string_literal))))
