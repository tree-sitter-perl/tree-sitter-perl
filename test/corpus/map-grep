================================================================================
map - BLOCK form
================================================================================
map { +"\L$_"  => 1 } @array;      # perl guesses BLOCK. right
map { ; "\L$_" => 1 } @array;      # this also works
map { ( "\L$_" => 1 ) } @array;    # as does this
map { lc($_) => 1 } @array;        # and this.
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (map_grep_expression
      (block
        (expression_statement
          (list_expression
            (unary_expression
              (interpolated_string_literal
                (escape_sequence)
                (scalar
                  (varname))))
            (number))))
      (array
        (varname))))
  (comment)
  (expression_statement
    (map_grep_expression
      (block
        (expression_statement
          (list_expression
            (interpolated_string_literal
              (escape_sequence)
              (scalar
                (varname)))
            (number))))
      (array
        (varname))))
  (comment)
  (expression_statement
    (map_grep_expression
      (block
        (expression_statement
          (list_expression
            (interpolated_string_literal
              (escape_sequence)
              (scalar
                (varname)))
            (number))))
      (array
        (varname))))
  (comment)
  (expression_statement
    (map_grep_expression
      (block
        (expression_statement
          (list_expression
            (func1op_call_expression
              (scalar
                (varname)))
            (number))))
      (array
        (varname))))
  (comment))

================================================================================
map - EXPR form
================================================================================
map +( lc($_) => 1 ), @array;      # this is EXPR and works!
map +{ lc($_) => 1 }, @array;      # EXPR, so needs comma at end
map { "\L$_"   => 1 }, @array;     # perl guesses EXPR; SURPRISE!
# thanks perldoc, for all the examples!
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (map_grep_expression
      (unary_expression
        (list_expression
          (func1op_call_expression
            (scalar
              (varname)))
          (number)))
      (array
        (varname))))
  (comment)
  (expression_statement
    (map_grep_expression
      (unary_expression
        (anonymous_hash_expression
          (list_expression
            (func1op_call_expression
              (scalar
                (varname)))
            (number))))
      (array
        (varname))))
  (comment)
  (expression_statement
    (map_grep_expression
      (anonymous_hash_expression
        (interpolated_string_literal
          (escape_sequence)
          (scalar
            (varname)))
        (number))
      (array
        (varname))))
  (comment)
  (comment))

================================================================================
map - goshdarn parens
================================================================================
%hash = map ( lc($_), 1 ), @array;         # evaluates to (1, @array)
# NOTE - this is ACTUALLY correct; the @array will not touch that hash, b/c it's not part
# of the assignment
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (list_expression
      (assignment_expression
        (hash
          (varname))
        (map_grep_expression
          (func1op_call_expression
            (scalar
              (varname)))
          (number)))
      (array
        (varname))))
  (comment)
  (comment)
  (comment))

================================================================================
map - different LISTs
================================================================================
map { lc($_) => 1 } 1, 2, 3;
map +(lc($_) => 1 ), 1, 2, 3;
map { lc($_) => 1 } (1, 2, 3);
map +(lc($_) => 1 ), (1, 2), 3;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (map_grep_expression
      callback: (block
        (expression_statement
          (list_expression
            (func1op_call_expression
              (scalar
                (varname)))
            (number))))
      list: (number)
      list: (number)
      list: (number)))
  (expression_statement
    (map_grep_expression
      callback: (unary_expression
        operand: (list_expression
          (func1op_call_expression
            (scalar
              (varname)))
          (number)))
      list: (number)
      list: (number)
      list: (number)))
  (expression_statement
    (map_grep_expression
      callback: (block
        (expression_statement
          (list_expression
            (func1op_call_expression
              (scalar
                (varname)))
            (number))))
      list: (list_expression
        (number)
        (number)
        (number))))
  (expression_statement
    (map_grep_expression
      callback: (unary_expression
        operand: (list_expression
          (func1op_call_expression
            (scalar
              (varname)))
          (number)))
      list: (list_expression
        (number)
        (number))
      list: (number))))

================================================================================
sort - with and without a BLOCK
================================================================================
sort 1, 2, 3;
sort { $a <=> $b } 1, 2, 3;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (sort_expression
      (number)
      (number)
      (number)))
  (expression_statement
    (sort_expression
      (block
        (expression_statement
          (equality_expression
            (scalar
              (varname))
            (scalar
              (varname)))))
      (number)
      (number)
      (number))))
