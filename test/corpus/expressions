================================================================================
do { STMT; }
================================================================================
do { 1; 2; };
do { 3; 4 };
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (do_expression
      (block
        (expression_statement
          (number))
        (expression_statement
          (number)))))
  (expression_statement
    (do_expression
      (block
        (expression_statement
          (number))
        (expression_statement
          (number))))))

================================================================================
do FILENAME
================================================================================
do './explode.pl';
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (eval_expression
      (filename
        (string_literal
          (string_content))))))

================================================================================
eval STRING
================================================================================
eval $x;
eval 'die $x';
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (eval_expression
      (scalar
        (varname))))
  (expression_statement
    (eval_expression
      (string_literal
        (string_content)))))

================================================================================
eval BLOCK
================================================================================
eval { $x };
eval { die $x };
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (eval_expression
      (block
        (expression_statement
          (scalar
            (varname))))))
  (expression_statement
    (eval_expression
      (block
        (expression_statement
          (ambiguous_function_call_expression
            (function)
            (scalar
              (varname))))))))

================================================================================
Anonymous array
================================================================================
[ 1, 2 ];
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (anonymous_array_expression
      (list_expression
        (number)
        (number)))))

================================================================================
Blocks that look like hashes
================================================================================
{ rand, 7 }
{ qr/thing/, 5 }
{ 1 + 2, 3 }
--------------------------------------------------------------------------------

(source_file
  (block_statement
    (expression_statement
      (list_expression
        (func1op_call_expression)
        (number))))
  (block_statement
    (expression_statement
      (list_expression
        (quoted_regexp
          (regexp_content))
        (number))))
  (block_statement
    (expression_statement
      (list_expression
        (binary_expression
          (number)
          (number))
        (number)))))

================================================================================
Anonymous hash
================================================================================
{ 1, 2 };
{ ting => 2 };
{};
+{ rand, 7 };
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (anonymous_hash_expression
      (list_expression
        (number)
        (number))))
  (expression_statement
    (anonymous_hash_expression
      (list_expression
        (autoquoted_bareword)
        (number))))
  (expression_statement
    (anonymous_hash_expression))
  (expression_statement
    (unary_expression
      (anonymous_hash_expression
        (list_expression
          (func1op_call_expression)
          (number))))))

================================================================================
Assignment
================================================================================
$var = 123;
$var = 12 + 34;
$var = 12, 34;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (assignment_expression
      (scalar
        (varname))
      (number)))
  (expression_statement
    (assignment_expression
      (scalar
        (varname))
      (binary_expression
        (number)
        (number))))
  (expression_statement
    (list_expression
      (assignment_expression
        (scalar
          (varname))
        (number))
      (number))))

================================================================================
Anonymous Slices
================================================================================
(1, 2, 3)[0];
qw/one two/[0];
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (anonymous_slice_expression
      list: (list_expression
        (number)
        (number)
        (number))
      (number)))
  (expression_statement
    (anonymous_slice_expression
      list: (quoted_word_list
        content: (string_content))
      (number))))

================================================================================
Slices
================================================================================
@ary[0,1];
@hash{qw/key1 key2/};
$aryref->@[0,1];
[0,1]->@[0];
$hashref->@{qw/key1 key2/};
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (slice_expression
      array: (slice_container_variable
        (varname))
      (list_expression
        (number)
        (number))))
  (expression_statement
    (slice_expression
      hash: (slice_container_variable
        (varname))
      (quoted_word_list
        content: (string_content))))
  (expression_statement
    (slice_expression
      arrayref: (scalar
        (varname))
      (list_expression
        (number)
        (number))))
  (expression_statement
    (slice_expression
      arrayref: (anonymous_array_expression
        (list_expression
          (number)
          (number)))
      (number)))
  (expression_statement
    (slice_expression
      hashref: (scalar
        (varname))
      (quoted_word_list
        content: (string_content)))))

================================================================================
Keyval Slices
================================================================================
%ary[0,1];
%hash{qw/key1 key2/};
$aryref->%[0,1];
[0,1]->%[0];
$hashref->%{qw/key1 key2/};
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (keyval_expression
      array: (keyval_container_variable
        (varname))
      (list_expression
        (number)
        (number))))
  (expression_statement
    (keyval_expression
      hash: (keyval_container_variable
        (varname))
      (quoted_word_list
        content: (string_content))))
  (expression_statement
    (keyval_expression
      arrayref: (scalar
        (varname))
      (list_expression
        (number)
        (number))))
  (expression_statement
    (keyval_expression
      arrayref: (anonymous_array_expression
        (list_expression
          (number)
          (number)))
      (number)))
  (expression_statement
    (keyval_expression
      hashref: (scalar
        (varname))
      (quoted_word_list
        content: (string_content)))))

================================================================================
Stub
================================================================================
();
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (stub_expression)))

================================================================================
Scalar deref
================================================================================
$$sref;
$sref->$*;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (scalar
      (varname
        (scalar
          (varname)))))
  (expression_statement
    (scalar_deref_expression
      (scalar
        (varname)))))

================================================================================
Array deref
================================================================================
@$aref;
$aref->@*;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (array
      (varname
        (scalar
          (varname)))))
  (expression_statement
    (array_deref_expression
      (scalar
        (varname)))))

================================================================================
Hash deref
================================================================================
%$href;
$href->%*;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (hash
      (varname
        (scalar
          (varname)))))
  (expression_statement
    (hash_deref_expression
      (scalar
        (varname)))))

================================================================================
Amper deref
================================================================================
$cref->&*;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (amper_deref_expression
      (scalar
        (varname)))))

================================================================================
Glob deref
================================================================================
*$gref;
$gref->**;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (glob
      (varname
        (scalar
          (varname)))))
  (expression_statement
    (glob_deref_expression
      (scalar
        (varname)))))

================================================================================
require EXPR
================================================================================
require Your::Face;
require v5.26;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (require_expression
      (bareword)))
  (expression_statement
    (require_version_expression
      (version))))

================================================================================
Loopex
================================================================================
next;
last LOOP;
redo;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (loopex_expression))
  (expression_statement
    (loopex_expression
      (label)))
  (expression_statement
    (loopex_expression)))

================================================================================
goto
================================================================================
goto LABEL;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (goto_expression
      (label))))

================================================================================
undef
================================================================================
undef;
undef $var;
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (undef_expression))
  (expression_statement
    (undef_expression
      (scalar
        (varname)))))

================================================================================
local and dynamically
================================================================================
local $var;
local $arr[$idx];
local $hash{$key};
dynamically $SIG{INT} = sub { ... };
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (localization_expression
      (scalar
        (varname))))
  (expression_statement
    (localization_expression
      (array_element_expression
        (container_variable
          (varname))
        (scalar
          (varname)))))
  (expression_statement
    (localization_expression
      (hash_element_expression
        (container_variable
          (varname))
        (scalar
          (varname)))))
  (expression_statement
    (assignment_expression
      (localization_expression
        (hash_element_expression
          (container_variable
            (varname))
          (autoquoted_bareword)))
      (anonymous_subroutine_expression
        (block
          (expression_statement
            (yadayada)))))))

================================================================================
return
================================================================================
return;
return 1, 2, 3;
return 1, 2, 3 or die("never reached");
--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (return_expression))
  (expression_statement
    (return_expression
      (number)
      (number)
      (number)))
  (expression_statement
    (lowprec_logical_expression
      (return_expression
        (number)
        (number)
        (number))
      (function_call_expression
        (function)
        (interpolated_string_literal
          (string_content))))))
