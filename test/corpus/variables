================================================================================
basic vars
================================================================================
$s;
$namespace::s;
@a;
$#a;
%h;
*g;
--------------------------------------------------------------------------------
(source_file
  (expression_statement (scalar))
  (expression_statement (scalar))
  (expression_statement (array))
  (expression_statement (arraylen))
  (expression_statement (hash))
  (expression_statement (glob)))
================================================================================
vars in expressions
================================================================================
$one + $two;
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (binary_expression (scalar) (scalar))))
================================================================================
variable declarations
================================================================================
my $s;
my @a;
my %h;
my ($S, @A, %h);
our $PackageVar;
--------------------------------------------------------------------------------
(source_file
  (expression_statement (variable_declaration (scalar)))
  (expression_statement (variable_declaration (array)))
  (expression_statement (variable_declaration (hash)))
  (expression_statement (variable_declaration (scalar) (array) (hash)))
  (expression_statement (variable_declaration (scalar)))
)
================================================================================
variable declarations including undef
================================================================================
my ($x, undef, $z);
--------------------------------------------------------------------------------
(source_file
  (expression_statement (variable_declaration (scalar) (undef_expression) (scalar))))
================================================================================
variable declarations with initialiser
================================================================================
my $s = 123;
my @a = (4, 5);
my %h = (6, 7);
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (assignment_expression (variable_declaration (scalar)) (number)))
  (expression_statement
    (assignment_expression (variable_declaration (array)) (list_expression (number) (number))))
  (expression_statement
    (assignment_expression (variable_declaration (hash)) (list_expression (number) (number)))))
================================================================================
variable declarations with attributes
================================================================================
my $s :shared;
my @a :lock;
my ($S, @A, %h) :MyAttr(foo);
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (variable_declaration (scalar) (attrlist (attribute (attribute_name)))))
  (expression_statement
    (variable_declaration (array) (attrlist (attribute (attribute_name)))))
  (expression_statement
    (variable_declaration (scalar) (array) (hash) (attrlist (attribute (attribute_name) (attribute_value))))))
================================================================================
array elements
================================================================================
$a[123];
$aref->[123];
$a[1][2][3];
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (array_element_expression
      array: (container_variable)
      index: (number)))
  (expression_statement
    (array_element_expression
      (scalar)
      index: (number)))
  (expression_statement
    (array_element_expression
      (array_element_expression
        (array_element_expression
          array: (container_variable)
          index: (number))
        index: (number))
      index: (number))))
================================================================================
hash elements
================================================================================
$h{123};
$href->{123};
$h{1}{2}{3};
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (hash_element_expression
      hash: (container_variable)
      key: (number)))
  (expression_statement
    (hash_element_expression
      (scalar)
      key: (number)))
  (expression_statement
    (hash_element_expression
      (hash_element_expression
        (hash_element_expression
          hash: (container_variable)
          key: (number))
        key: (number))
      key: (number))))
================================================================================
coderef calls
================================================================================
$code->();
$code->('args');
$code->('args')(1)("and again")
--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (coderef_call_expression
      (scalar)))
  (expression_statement
    (coderef_call_expression
      (scalar)
      (string_literal)))
  (expression_statement
    (coderef_call_expression
      (coderef_call_expression
        (coderef_call_expression
          (scalar)
          (string_literal))
        (number))
      (interpolated_string_literal))))
================================================================================
special vars
================================================================================
$1;
$^X;
$!;
--------------------------------------------------------------------------------
(source_file
  (expression_statement (scalar))
  (expression_statement (scalar))
  (expression_statement (scalar)))
================================================================================
crazy vars
================================================================================
$::application;
$::::var;
%overload::;
--------------------------------------------------------------------------------
(source_file
  (expression_statement (scalar))
  (expression_statement (scalar))
  (expression_statement (hash))
)
