================================================================================
expression as statement
================================================================================
123;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (number)))
================================================================================
postfix if
================================================================================
123 if 45;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (postfix_if_expression (number) (number))))
================================================================================
postfix unless
================================================================================
123 unless 45;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (postfix_unless_expression (number) (number))))
================================================================================
postfix while
================================================================================
123 while 45;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (postfix_while_expression (number) (number))))
================================================================================
postfix until
================================================================================
123 until 45;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (postfix_until_expression (number) (number))))
================================================================================
postfix for
================================================================================
123 for 45;
123 foreach 45;
--------------------------------------------------------------------------------

(source_file
  (expression_statement (postfix_for_expression (number) (number)))
  (expression_statement (postfix_for_expression (number) (number))))
================================================================================
block if
================================================================================
if(1) { 123; }
--------------------------------------------------------------------------------

(source_file
  (if_statement (number)
    (block
      (expression_statement (number)))))
================================================================================
block if/else
================================================================================
if(1) { 123; } else { 456; }
--------------------------------------------------------------------------------

(source_file
  (if_statement (number)
    (block
      (expression_statement (number)))
    (else
      (block
        (expression_statement (number))))))
================================================================================
block if/elsif
================================================================================
if(1) { 123; } elsif(2) { 456; }
--------------------------------------------------------------------------------

(source_file
  (if_statement (number)
    (block
      (expression_statement (number)))
    (elsif (number)
      (block
        (expression_statement (number))))))
================================================================================
block if/elsif/else
================================================================================
if(1) { 123; } elsif(2) { 456; } else { 789; }
--------------------------------------------------------------------------------

(source_file
  (if_statement (number)
    (block
      (expression_statement (number)))
    (elsif (number)
      (block
        (expression_statement (number)))
      (else
        (block
          (expression_statement (number)))))))
================================================================================
block unless
================================================================================
unless(1) { 123; }
--------------------------------------------------------------------------------

(source_file
  (unless_statement (number)
    (block
      (expression_statement (number)))))
================================================================================
block while
================================================================================
while(1) { 123; }
--------------------------------------------------------------------------------

(source_file
  (while_statement (number)
    (block
      (expression_statement (number)))))
================================================================================
block until
================================================================================
until(1) { 123; }
--------------------------------------------------------------------------------

(source_file
  (until_statement (number)
    (block
      (expression_statement (number)))))
================================================================================
for (LIST) BLOCK
================================================================================
for (1, 2, 3) { 456; }
foreach (1, 2, 3) { 456; }
--------------------------------------------------------------------------------

(source_file
  (for_statement (list_expression (number) (number) (number))
    (block (expression_statement (number))))
  (for_statement (list_expression (number) (number) (number))
    (block (expression_statement (number)))))
================================================================================
for VAR (LIST) BLOCK
================================================================================
for $V (1, 2, 3) { 456; }
foreach $V (1, 2, 3) { 456; }
--------------------------------------------------------------------------------

(source_file
  (for_statement (scalar) (list_expression (number) (number) (number))
    (block (expression_statement (number))))
  (for_statement (scalar) (list_expression (number) (number) (number))
    (block (expression_statement (number)))))
================================================================================
for my VAR (LIST) BLOCK
================================================================================
for my $x (1, 2, 3) { 456; }
foreach my $x (1, 2, 3) { 456; }
--------------------------------------------------------------------------------

(source_file
  (for_statement (scalar) (list_expression (number) (number) (number))
    (block (expression_statement (number))))
  (for_statement (scalar) (list_expression (number) (number) (number))
    (block (expression_statement (number)))))
================================================================================
C-style for
================================================================================
for (my $i = 0; $i < 10; $i++) { 123; }
--------------------------------------------------------------------------------

(source_file
  (cstyle_for_statement
    initialiser: (assignment_expression
      left: (variable_declaration variable: (scalar))
      right: (number))
    condition: (relational_expression
      arg: (scalar)
      arg: (number)
    )
    iterator: (postinc_expression operand: (scalar))
    (block (expression_statement (number)))))
================================================================================
use VERSION;
================================================================================
use 5.014;
use v5;
use v5.14;
--------------------------------------------------------------------------------

(source_file
  (use_version_statement (number))
  (use_version_statement (version))
  (use_version_statement (version)))
================================================================================
use MODULE;
================================================================================
use strict;
use List::Util 1.23;
--------------------------------------------------------------------------------

(source_file
  (use_statement module: (package))
  (use_statement module: (package) version: (number)))
================================================================================
package;
================================================================================
package AAA;
package BBB 1.23;
package CCC { }
package DDD 4.56 { }
package :: { }
package ::butwhy:::::: { }
--------------------------------------------------------------------------------

(source_file
  (package_statement (package))
  (package_statement (package) (number))
  (package_statement (package) (block))
  (package_statement (package) (number) (block))
  (package_statement (package) (block))
  (package_statement (package) (block))
)
================================================================================
Labels
================================================================================
FOO: 123;
LOOP: foreach (@list) { }
ITEM: while(@items) { }
--------------------------------------------------------------------------------

(source_file
  (statement_label
    label: (identifier)
    statement: (expression_statement (number)))
  (statement_label
    label: (identifier)
    statement: (for_statement
      list: (array)
      block: (block)))
  (statement_label
    label: (identifier)
    statement: (while_statement
      condition: (array)
      block: (block))))
================================================================================
phasers
================================================================================
BEGIN { 123; }
END { 456; }
--------------------------------------------------------------------------------

(source_file
  (phaser_statement
    (block (expression_statement (number))))
  (phaser_statement
    (block (expression_statement (number)))))
================================================================================
bare blocks
================================================================================
{ 123; }
{ 456; }
{ { 789; } }
--------------------------------------------------------------------------------

(source_file
  (block_statement (expression_statement (number)))
  (block_statement (expression_statement (number)))
  (block_statement (block_statement (expression_statement (number)))))
